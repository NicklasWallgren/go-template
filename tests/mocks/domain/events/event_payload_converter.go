// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	events "github.com/NicklasWallgren/go-template/domain/event"
	mock "github.com/stretchr/testify/mock"
)

// EventPayloadConverter is an autogenerated mock type for the EventPayloadConverter type
type EventPayloadConverter struct {
	mock.Mock
}

type EventPayloadConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *EventPayloadConverter) EXPECT() *EventPayloadConverter_Expecter {
	return &EventPayloadConverter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: event
func (_m *EventPayloadConverter) Execute(event *events.Event) (interface{}, error) {
	ret := _m.Called(event)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*events.Event) interface{}); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*events.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventPayloadConverter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type EventPayloadConverter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - event *event.Event
func (_e *EventPayloadConverter_Expecter) Execute(event interface{}) *EventPayloadConverter_Execute_Call {
	return &EventPayloadConverter_Execute_Call{Call: _e.mock.On("Execute", event)}
}

func (_c *EventPayloadConverter_Execute_Call) Run(run func(event *events.Event)) *EventPayloadConverter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*events.Event))
	})
	return _c
}

func (_c *EventPayloadConverter_Execute_Call) Return(_a0 interface{}, _a1 error) *EventPayloadConverter_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewEventPayloadConverter interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventPayloadConverter creates a new instance of EventPayloadConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventPayloadConverter(t mockConstructorTestingTNewEventPayloadConverter) *EventPayloadConverter {
	mock := &EventPayloadConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
