// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/NicklasWallgren/go-template/domain/users/entities"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/NicklasWallgren/go-template/adapters/driven/persistence/models"

	users "github.com/NicklasWallgren/go-template/domain/users"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, toBeCreated
func (_m *UserService) CreateUser(ctx context.Context, toBeCreated entities.User) (*entities.User, error) {
	ret := _m.Called(ctx, toBeCreated)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) *entities.User); ok {
		r0 = rf(ctx, toBeCreated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.User) error); ok {
		r1 = rf(ctx, toBeCreated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - toBeCreated entities.User
func (_e *UserService_Expecter) CreateUser(ctx interface{}, toBeCreated interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, toBeCreated)}
}

func (_c *UserService_CreateUser_Call) Run(run func(ctx context.Context, toBeCreated entities.User)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.User))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(user *entities.User, err error) *UserService_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

// DeleteUserByID provides a mock function with given fields: ctx, id
func (_m *UserService) DeleteUserByID(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByID'
type UserService_DeleteUserByID_Call struct {
	*mock.Call
}

// DeleteUserByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint
func (_e *UserService_Expecter) DeleteUserByID(ctx interface{}, id interface{}) *UserService_DeleteUserByID_Call {
	return &UserService_DeleteUserByID_Call{Call: _e.mock.On("DeleteUserByID", ctx, id)}
}

func (_c *UserService_DeleteUserByID_Call) Run(run func(ctx context.Context, id uint)) *UserService_DeleteUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *UserService_DeleteUserByID_Call) Return(_a0 error) *UserService_DeleteUserByID_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindAllUser provides a mock function with given fields: ctx, pagination
func (_m *UserService) FindAllUser(ctx context.Context, pagination *models.Pagination) (*models.Page[*entities.User], error) {
	ret := _m.Called(ctx, pagination)

	var r0 *models.Page[*entities.User]
	if rf, ok := ret.Get(0).(func(context.Context, *models.Pagination) *models.Page[*entities.User]); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page[*entities.User])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_FindAllUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllUser'
type UserService_FindAllUser_Call struct {
	*mock.Call
}

// FindAllUser is a helper method to define mock.On call
//  - ctx context.Context
//  - pagination *models.Pagination
func (_e *UserService_Expecter) FindAllUser(ctx interface{}, pagination interface{}) *UserService_FindAllUser_Call {
	return &UserService_FindAllUser_Call{Call: _e.mock.On("FindAllUser", ctx, pagination)}
}

func (_c *UserService_FindAllUser_Call) Run(run func(ctx context.Context, pagination *models.Pagination)) *UserService_FindAllUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Pagination))
	})
	return _c
}

func (_c *UserService_FindAllUser_Call) Return(_a0 *models.Page[*entities.User], err error) *UserService_FindAllUser_Call {
	_c.Call.Return(_a0, err)
	return _c
}

// FindOneUserByID provides a mock function with given fields: ctx, id
func (_m *UserService) FindOneUserByID(ctx context.Context, id uint) (*entities.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_FindOneUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneUserByID'
type UserService_FindOneUserByID_Call struct {
	*mock.Call
}

// FindOneUserByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint
func (_e *UserService_Expecter) FindOneUserByID(ctx interface{}, id interface{}) *UserService_FindOneUserByID_Call {
	return &UserService_FindOneUserByID_Call{Call: _e.mock.On("FindOneUserByID", ctx, id)}
}

func (_c *UserService_FindOneUserByID_Call) Run(run func(ctx context.Context, id uint)) *UserService_FindOneUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *UserService_FindOneUserByID_Call) Return(user *entities.User, err error) *UserService_FindOneUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

// FindOneUserByIDForUpdate provides a mock function with given fields: ctx, id
func (_m *UserService) FindOneUserByIDForUpdate(ctx context.Context, id uint) (*entities.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_FindOneUserByIDForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneUserByIDForUpdate'
type UserService_FindOneUserByIDForUpdate_Call struct {
	*mock.Call
}

// FindOneUserByIDForUpdate is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint
func (_e *UserService_Expecter) FindOneUserByIDForUpdate(ctx interface{}, id interface{}) *UserService_FindOneUserByIDForUpdate_Call {
	return &UserService_FindOneUserByIDForUpdate_Call{Call: _e.mock.On("FindOneUserByIDForUpdate", ctx, id)}
}

func (_c *UserService_FindOneUserByIDForUpdate_Call) Run(run func(ctx context.Context, id uint)) *UserService_FindOneUserByIDForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *UserService_FindOneUserByIDForUpdate_Call) Return(_a0 *entities.User, _a1 error) *UserService_FindOneUserByIDForUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, updated
func (_m *UserService) UpdateUser(ctx context.Context, updated *entities.User) (*entities.User, error) {
	ret := _m.Called(ctx, updated)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) *entities.User); ok {
		r0 = rf(ctx, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entities.User) error); ok {
		r1 = rf(ctx, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - updated *entities.User
func (_e *UserService_Expecter) UpdateUser(ctx interface{}, updated interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, updated)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(ctx context.Context, updated *entities.User)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(user *entities.User, err error) *UserService_UpdateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *UserService) WithTx(tx *gorm.DB) users.UserService {
	ret := _m.Called(tx)

	var r0 users.UserService
	if rf, ok := ret.Get(0).(func(*gorm.DB) users.UserService); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(users.UserService)
		}
	}

	return r0
}

// UserService_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type UserService_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//  - tx *gorm.DB
func (_e *UserService_Expecter) WithTx(tx interface{}) *UserService_WithTx_Call {
	return &UserService_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *UserService_WithTx_Call) Run(run func(tx *gorm.DB)) *UserService_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *UserService_WithTx_Call) Return(_a0 users.UserService) *UserService_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
