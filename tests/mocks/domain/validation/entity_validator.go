// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/NicklasWallgren/go-template/domain/common"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	validation "github.com/NicklasWallgren/go-template/domain/validation"
)

// EntityValidator is an autogenerated mock type for the EntityValidator type
type EntityValidator[T common.EntityConstraint] struct {
	mock.Mock
}

type EntityValidator_Expecter[T common.EntityConstraint] struct {
	mock *mock.Mock
}

func (_m *EntityValidator[T]) EXPECT() *EntityValidator_Expecter[T] {
	return &EntityValidator_Expecter[T]{mock: &_m.Mock}
}

// ValidateToCreate provides a mock function with given fields: ctx, entity
func (_m *EntityValidator[T]) ValidateToCreate(ctx context.Context, entity *T) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntityValidator_ValidateToCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToCreate'
type EntityValidator_ValidateToCreate_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// ValidateToCreate is a helper method to define mock.On call
//  - ctx context.Context
//  - entity *T
func (_e *EntityValidator_Expecter[T]) ValidateToCreate(ctx interface{}, entity interface{}) *EntityValidator_ValidateToCreate_Call[T] {
	return &EntityValidator_ValidateToCreate_Call[T]{Call: _e.mock.On("ValidateToCreate", ctx, entity)}
}

func (_c *EntityValidator_ValidateToCreate_Call[T]) Run(run func(ctx context.Context, entity *T)) *EntityValidator_ValidateToCreate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T))
	})
	return _c
}

func (_c *EntityValidator_ValidateToCreate_Call[T]) Return(_a0 error) *EntityValidator_ValidateToCreate_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// ValidateToDelete provides a mock function with given fields: ctx, entity
func (_m *EntityValidator[T]) ValidateToDelete(ctx context.Context, entity *T) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntityValidator_ValidateToDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToDelete'
type EntityValidator_ValidateToDelete_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// ValidateToDelete is a helper method to define mock.On call
//  - ctx context.Context
//  - entity *T
func (_e *EntityValidator_Expecter[T]) ValidateToDelete(ctx interface{}, entity interface{}) *EntityValidator_ValidateToDelete_Call[T] {
	return &EntityValidator_ValidateToDelete_Call[T]{Call: _e.mock.On("ValidateToDelete", ctx, entity)}
}

func (_c *EntityValidator_ValidateToDelete_Call[T]) Run(run func(ctx context.Context, entity *T)) *EntityValidator_ValidateToDelete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T))
	})
	return _c
}

func (_c *EntityValidator_ValidateToDelete_Call[T]) Return(_a0 error) *EntityValidator_ValidateToDelete_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// ValidateToUpdate provides a mock function with given fields: ctx, origin, updated
func (_m *EntityValidator[T]) ValidateToUpdate(ctx context.Context, origin *T, updated *T) error {
	ret := _m.Called(ctx, origin, updated)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T, *T) error); ok {
		r0 = rf(ctx, origin, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntityValidator_ValidateToUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToUpdate'
type EntityValidator_ValidateToUpdate_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// ValidateToUpdate is a helper method to define mock.On call
//  - ctx context.Context
//  - origin *T
//  - updated *T
func (_e *EntityValidator_Expecter[T]) ValidateToUpdate(ctx interface{}, origin interface{}, updated interface{}) *EntityValidator_ValidateToUpdate_Call[T] {
	return &EntityValidator_ValidateToUpdate_Call[T]{Call: _e.mock.On("ValidateToUpdate", ctx, origin, updated)}
}

func (_c *EntityValidator_ValidateToUpdate_Call[T]) Run(run func(ctx context.Context, origin *T, updated *T)) *EntityValidator_ValidateToUpdate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T), args[2].(*T))
	})
	return _c
}

func (_c *EntityValidator_ValidateToUpdate_Call[T]) Return(_a0 error) *EntityValidator_ValidateToUpdate_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *EntityValidator[T]) WithTx(tx *gorm.DB) validation.EntityValidator[T] {
	ret := _m.Called(tx)

	var r0 validation.EntityValidator[T]
	if rf, ok := ret.Get(0).(func(*gorm.DB) validation.EntityValidator[T]); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validation.EntityValidator[T])
		}
	}

	return r0
}

// EntityValidator_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type EntityValidator_WithTx_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//  - tx *gorm.DB
func (_e *EntityValidator_Expecter[T]) WithTx(tx interface{}) *EntityValidator_WithTx_Call[T] {
	return &EntityValidator_WithTx_Call[T]{Call: _e.mock.On("WithTx", tx)}
}

func (_c *EntityValidator_WithTx_Call[T]) Run(run func(tx *gorm.DB)) *EntityValidator_WithTx_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *EntityValidator_WithTx_Call[T]) Return(_a0 validation.EntityValidator[T]) *EntityValidator_WithTx_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewEntityValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewEntityValidator creates a new instance of EntityValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEntityValidator[T common.EntityConstraint](t mockConstructorTestingTNewEntityValidator) *EntityValidator[T] {
	mock := &EntityValidator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
