// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/NicklasWallgren/go-template/domain/event"
	mock "github.com/stretchr/testify/mock"
)

// Listener is an autogenerated mock type for the Listener type
type Listener struct {
	mock.Mock
}

type Listener_Expecter struct {
	mock *mock.Mock
}

func (_m *Listener) EXPECT() *Listener_Expecter {
	return &Listener_Expecter{mock: &_m.Mock}
}

// Listen provides a mock function with given fields: ctx, _a1
func (_m *Listener) Listen(ctx context.Context, _a1 event.Event) {
	_m.Called(ctx, _a1)
}

// Listener_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type Listener_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//  - ctx context.Context
//  - _a1 event.Event
func (_e *Listener_Expecter) Listen(ctx interface{}, _a1 interface{}) *Listener_Listen_Call {
	return &Listener_Listen_Call{Call: _e.mock.On("Listen", ctx, _a1)}
}

func (_c *Listener_Listen_Call) Run(run func(ctx context.Context, _a1 event.Event)) *Listener_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(event.Event))
	})
	return _c
}

func (_c *Listener_Listen_Call) Return() *Listener_Listen_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewListener interface {
	mock.TestingT
	Cleanup(func())
}

// NewListener creates a new instance of Listener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewListener(t mockConstructorTestingTNewListener) *Listener {
	mock := &Listener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
