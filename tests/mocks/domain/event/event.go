// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	event "github.com/NicklasWallgren/go-template/domain/event"
	mock "github.com/stretchr/testify/mock"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

type Event_Expecter struct {
	mock *mock.Mock
}

func (_m *Event) EXPECT() *Event_Expecter {
	return &Event_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *Event) Name() event.Name {
	ret := _m.Called()

	var r0 event.Name
	if rf, ok := ret.Get(0).(func() event.Name); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(event.Name)
	}

	return r0
}

// Event_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Event_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Event_Expecter) Name() *Event_Name_Call {
	return &Event_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Event_Name_Call) Run(run func()) *Event_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_Name_Call) Return(_a0 event.Name) *Event_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewEvent interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvent(t mockConstructorTestingTNewEvent) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
