// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EntityConverter is an autogenerated mock type for the EntityConverter type
type EntityConverter[T interface{}] struct {
	mock.Mock
}

type EntityConverter_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *EntityConverter[T]) EXPECT() *EntityConverter_Expecter[T] {
	return &EntityConverter_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: entity
func (_m *EntityConverter[T]) Execute(entity T) interface{} {
	ret := _m.Called(entity)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(T) interface{}); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EntityConverter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type EntityConverter_Execute_Call[T interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - entity T
func (_e *EntityConverter_Expecter[T]) Execute(entity interface{}) *EntityConverter_Execute_Call[T] {
	return &EntityConverter_Execute_Call[T]{Call: _e.mock.On("Execute", entity)}
}

func (_c *EntityConverter_Execute_Call[T]) Run(run func(entity T)) *EntityConverter_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *EntityConverter_Execute_Call[T]) Return(_a0 interface{}) *EntityConverter_Execute_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewEntityConverter interface {
	mock.TestingT
	Cleanup(func())
}

// NewEntityConverter creates a new instance of EntityConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEntityConverter[T interface{}](t mockConstructorTestingTNewEntityConverter) *EntityConverter[T] {
	mock := &EntityConverter[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
