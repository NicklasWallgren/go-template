// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	"context"
	entities "github.com/NicklasWallgren/go-template/domain/users/entities"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/NicklasWallgren/go-template/adapters/driver/persistence/models"

	testing "testing"

	users "github.com/NicklasWallgren/go-template/adapters/driver/persistence/users"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *UserRepository) Count(ctx context.Context) (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: user
func (_m *UserRepository) Create(ctx context.Context, user *entities.User) (*entities.User, error) {
	ret := _m.Called(user)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(*entities.User) *entities.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *UserRepository) DeleteById(ctx context.Context, id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: pagination
func (_m *UserRepository) FindAll(ctx context.Context, pagination *models.Pagination) (*models.Page[entities.User], error) {
	ret := _m.Called(pagination)

	var r0 *models.Page[entities.User]
	if rf, ok := ret.Get(0).(func(*models.Pagination) *models.Page[entities.User]); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page[entities.User])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Pagination) error); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByEmailWithExclusiveLock provides a mock function with given fields: email
func (_m *UserRepository) FindOneByEmailWithExclusiveLock(ctx context.Context, email string) (*entities.User, error) {
	ret := _m.Called(email)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(string) *entities.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneById provides a mock function with given fields: id
func (_m *UserRepository) FindOneById(ctx context.Context, id uint) (*entities.User, error) {
	ret := _m.Called(id)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(uint) *entities.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByIdForUpdate provides a mock function with given fields: id
func (_m *UserRepository) FindOneByIdForUpdate(ctx context.Context, id uint) (*entities.User, error) {
	ret := _m.Called(id)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(uint) *entities.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *UserRepository) Save(ctx context.Context, user *entities.User) (*entities.User, error) {
	ret := _m.Called(user)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(*entities.User) *entities.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactWithDefaultRetry provides a mock function with given fields: operation
func (_m *UserRepository) TransactWithDefaultRetry(ctx context.Context, operation func(*gorm.DB) error) error {
	ret := _m.Called(operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: trxHandle
func (_m *UserRepository) WithTx(trxHandle *gorm.DB) users.UserRepository {
	ret := _m.Called(trxHandle)

	var r0 users.UserRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) users.UserRepository); ok {
		r0 = rf(trxHandle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(users.UserRepository)
		}
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t testing.TB) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
