// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// ExpectOption is an autogenerated mock type for the ExpectOption type
type ExpectOption struct {
	mock.Mock
}

type ExpectOption_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpectOption) EXPECT() *ExpectOption_Expecter {
	return &ExpectOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: t, response
func (_m *ExpectOption) Execute(t *testing.T, response *http.Response) {
	_m.Called(t, response)
}

// ExpectOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ExpectOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - t *testing.T
//  - response *http.Response
func (_e *ExpectOption_Expecter) Execute(t interface{}, response interface{}) *ExpectOption_Execute_Call {
	return &ExpectOption_Execute_Call{Call: _e.mock.On("Execute", t, response)}
}

func (_c *ExpectOption_Execute_Call) Run(run func(t *testing.T, response *http.Response)) *ExpectOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*testing.T), args[1].(*http.Response))
	})
	return _c
}

func (_c *ExpectOption_Execute_Call) Return() *ExpectOption_Execute_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewExpectOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewExpectOption creates a new instance of ExpectOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExpectOption(t mockConstructorTestingTNewExpectOption) *ExpectOption {
	mock := &ExpectOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
