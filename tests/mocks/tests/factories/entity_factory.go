// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/NicklasWallgren/go-template/domain/common"

	fakers "github.com/NicklasWallgren/go-template/tests/fakers"

	mock "github.com/stretchr/testify/mock"
)

// EntityFactory is an autogenerated mock type for the EntityFactory type
type EntityFactory[T common.EntityConstraint, U fakers.EntityFaker[T]] struct {
	mock.Mock
}

type EntityFactory_Expecter[T common.EntityConstraint, U fakers.EntityFaker[T]] struct {
	mock *mock.Mock
}

func (_m *EntityFactory[T, U]) EXPECT() *EntityFactory_Expecter[T, U] {
	return &EntityFactory_Expecter[T, U]{mock: &_m.Mock}
}

// Any provides a mock function with given fields:
func (_m *EntityFactory[T, U]) Any() (*T, error) {
	ret := _m.Called()

	var r0 *T
	if rf, ok := ret.Get(0).(func() *T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntityFactory_Any_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Any'
type EntityFactory_Any_Call[T common.EntityConstraint, U fakers.EntityFaker[T]] struct {
	*mock.Call
}

// Any is a helper method to define mock.On call
func (_e *EntityFactory_Expecter[T, U]) Any() *EntityFactory_Any_Call[T, U] {
	return &EntityFactory_Any_Call[T, U]{Call: _e.mock.On("Any")}
}

func (_c *EntityFactory_Any_Call[T, U]) Run(run func()) *EntityFactory_Any_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityFactory_Any_Call[T, U]) Return(_a0 *T, _a1 error) *EntityFactory_Any_Call[T, U] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Given provides a mock function with given fields: entity
func (_m *EntityFactory[T, U]) Given(entity T) (*T, error) {
	ret := _m.Called(entity)

	var r0 *T
	if rf, ok := ret.Get(0).(func(T) *T); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(T) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntityFactory_Given_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Given'
type EntityFactory_Given_Call[T common.EntityConstraint, U fakers.EntityFaker[T]] struct {
	*mock.Call
}

// Given is a helper method to define mock.On call
//  - entity T
func (_e *EntityFactory_Expecter[T, U]) Given(entity interface{}) *EntityFactory_Given_Call[T, U] {
	return &EntityFactory_Given_Call[T, U]{Call: _e.mock.On("Given", entity)}
}

func (_c *EntityFactory_Given_Call[T, U]) Run(run func(entity T)) *EntityFactory_Given_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *EntityFactory_Given_Call[T, U]) Return(_a0 *T, _a1 error) *EntityFactory_Given_Call[T, U] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Many provides a mock function with given fields: numberOfEntities
func (_m *EntityFactory[T, U]) Many(numberOfEntities int) ([]T, error) {
	ret := _m.Called(numberOfEntities)

	var r0 []T
	if rf, ok := ret.Get(0).(func(int) []T); ok {
		r0 = rf(numberOfEntities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(numberOfEntities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntityFactory_Many_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Many'
type EntityFactory_Many_Call[T common.EntityConstraint, U fakers.EntityFaker[T]] struct {
	*mock.Call
}

// Many is a helper method to define mock.On call
//  - numberOfEntities int
func (_e *EntityFactory_Expecter[T, U]) Many(numberOfEntities interface{}) *EntityFactory_Many_Call[T, U] {
	return &EntityFactory_Many_Call[T, U]{Call: _e.mock.On("Many", numberOfEntities)}
}

func (_c *EntityFactory_Many_Call[T, U]) Run(run func(numberOfEntities int)) *EntityFactory_Many_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *EntityFactory_Many_Call[T, U]) Return(_a0 []T, _a1 error) *EntityFactory_Many_Call[T, U] {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewEntityFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewEntityFactory creates a new instance of EntityFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEntityFactory[T common.EntityConstraint, U fakers.EntityFaker[T]](t mockConstructorTestingTNewEntityFactory) *EntityFactory[T, U] {
	mock := &EntityFactory[T, U]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
