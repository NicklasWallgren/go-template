// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/NicklasWallgren/go-template/domain/common"

	mock "github.com/stretchr/testify/mock"
)

// EntityFaker is an autogenerated mock type for the EntityFaker type
type EntityFaker[T common.EntityConstraint] struct {
	mock.Mock
}

type EntityFaker_Expecter[T common.EntityConstraint] struct {
	mock *mock.Mock
}

func (_m *EntityFaker[T]) EXPECT() *EntityFaker_Expecter[T] {
	return &EntityFaker_Expecter[T]{mock: &_m.Mock}
}

// Any provides a mock function with given fields:
func (_m *EntityFaker[T]) Any() T {
	ret := _m.Called()

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// EntityFaker_Any_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Any'
type EntityFaker_Any_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// Any is a helper method to define mock.On call
func (_e *EntityFaker_Expecter[T]) Any() *EntityFaker_Any_Call[T] {
	return &EntityFaker_Any_Call[T]{Call: _e.mock.On("Any")}
}

func (_c *EntityFaker_Any_Call[T]) Run(run func()) *EntityFaker_Any_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityFaker_Any_Call[T]) Return(_a0 T) *EntityFaker_Any_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// Create provides a mock function with given fields:
func (_m *EntityFaker[T]) Create() T {
	ret := _m.Called()

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// EntityFaker_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type EntityFaker_Create_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *EntityFaker_Expecter[T]) Create() *EntityFaker_Create_Call[T] {
	return &EntityFaker_Create_Call[T]{Call: _e.mock.On("Create")}
}

func (_c *EntityFaker_Create_Call[T]) Run(run func()) *EntityFaker_Create_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityFaker_Create_Call[T]) Return(_a0 T) *EntityFaker_Create_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewEntityFaker interface {
	mock.TestingT
	Cleanup(func())
}

// NewEntityFaker creates a new instance of EntityFaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEntityFaker[T common.EntityConstraint](t mockConstructorTestingTNewEntityFaker) *EntityFaker[T] {
	mock := &EntityFaker[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
