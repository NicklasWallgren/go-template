// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	rabbitmq "github.com/NicklasWallgren/go-template/adapters/driven/rabbitmq"
	mock "github.com/stretchr/testify/mock"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

type Consumer_Expecter struct {
	mock *mock.Mock
}

func (_m *Consumer) EXPECT() *Consumer_Expecter {
	return &Consumer_Expecter{mock: &_m.Mock}
}

// Consume provides a mock function with given fields: ctx, runner
func (_m *Consumer) Consume(ctx context.Context, runner rabbitmq.ConsumerRunner) {
	_m.Called(ctx, runner)
}

// Consumer_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type Consumer_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//  - ctx context.Context
//  - runner rabbitmq.ConsumerRunner
func (_e *Consumer_Expecter) Consume(ctx interface{}, runner interface{}) *Consumer_Consume_Call {
	return &Consumer_Consume_Call{Call: _e.mock.On("Consume", ctx, runner)}
}

func (_c *Consumer_Consume_Call) Run(run func(ctx context.Context, runner rabbitmq.ConsumerRunner)) *Consumer_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(rabbitmq.ConsumerRunner))
	})
	return _c
}

func (_c *Consumer_Consume_Call) Return() *Consumer_Consume_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewConsumer interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumer(t mockConstructorTestingTNewConsumer) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
