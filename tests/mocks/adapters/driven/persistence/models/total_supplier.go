// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TotalSupplier is an autogenerated mock type for the TotalSupplier type
type TotalSupplier struct {
	mock.Mock
}

type TotalSupplier_Expecter struct {
	mock *mock.Mock
}

func (_m *TotalSupplier) EXPECT() *TotalSupplier_Expecter {
	return &TotalSupplier_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *TotalSupplier) Execute() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalSupplier_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type TotalSupplier_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *TotalSupplier_Expecter) Execute() *TotalSupplier_Execute_Call {
	return &TotalSupplier_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *TotalSupplier_Execute_Call) Run(run func()) *TotalSupplier_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TotalSupplier_Execute_Call) Return(_a0 int, _a1 error) *TotalSupplier_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTotalSupplier interface {
	mock.TestingT
	Cleanup(func())
}

// NewTotalSupplier creates a new instance of TotalSupplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTotalSupplier(t mockConstructorTestingTNewTotalSupplier) *TotalSupplier {
	mock := &TotalSupplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
