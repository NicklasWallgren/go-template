// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

type Driver_Expecter struct {
	mock *mock.Mock
}

func (_m *Driver) EXPECT() *Driver_Expecter {
	return &Driver_Expecter{mock: &_m.Mock}
}

// ConvertError provides a mock function with given fields: driverError
func (_m *Driver) ConvertError(driverError error) error {
	ret := _m.Called(driverError)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(driverError)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Driver_ConvertError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertError'
type Driver_ConvertError_Call struct {
	*mock.Call
}

// ConvertError is a helper method to define mock.On call
//  - driverError error
func (_e *Driver_Expecter) ConvertError(driverError interface{}) *Driver_ConvertError_Call {
	return &Driver_ConvertError_Call{Call: _e.mock.On("ConvertError", driverError)}
}

func (_c *Driver_ConvertError_Call) Run(run func(driverError error)) *Driver_ConvertError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Driver_ConvertError_Call) Return(_a0 error) *Driver_ConvertError_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewDriver interface {
	mock.TestingT
	Cleanup(func())
}

// NewDriver creates a new instance of Driver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDriver(t mockConstructorTestingTNewDriver) *Driver {
	mock := &Driver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
