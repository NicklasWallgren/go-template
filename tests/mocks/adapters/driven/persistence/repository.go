// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/NicklasWallgren/go-template/domain/common"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/NicklasWallgren/go-template/adapters/driven/persistence/models"

	persistence "github.com/NicklasWallgren/go-template/adapters/driven/persistence"
)

// Repository is an autogenerated mock type for the Repository type
type Repository[T common.EntityConstraint] struct {
	mock.Mock
}

type Repository_Expecter[T common.EntityConstraint] struct {
	mock *mock.Mock
}

func (_m *Repository[T]) EXPECT() *Repository_Expecter[T] {
	return &Repository_Expecter[T]{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx
func (_m *Repository[T]) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type Repository_Count_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Repository_Expecter[T]) Count(ctx interface{}) *Repository_Count_Call[T] {
	return &Repository_Count_Call[T]{Call: _e.mock.On("Count", ctx)}
}

func (_c *Repository_Count_Call[T]) Run(run func(ctx context.Context)) *Repository_Count_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_Count_Call[T]) Return(_a0 int64, _a1 error) *Repository_Count_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Create provides a mock function with given fields: ctx, entity
func (_m *Repository[T]) Create(ctx context.Context, entity *T) (*T, error) {
	ret := _m.Called(ctx, entity)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, *T) *T); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - entity *T
func (_e *Repository_Expecter[T]) Create(ctx interface{}, entity interface{}) *Repository_Create_Call[T] {
	return &Repository_Create_Call[T]{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *Repository_Create_Call[T]) Run(run func(ctx context.Context, entity *T)) *Repository_Create_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T))
	})
	return _c
}

func (_c *Repository_Create_Call[T]) Return(_a0 *T, _a1 error) *Repository_Create_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *Repository[T]) DeleteByID(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type Repository_DeleteByID_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint
func (_e *Repository_Expecter[T]) DeleteByID(ctx interface{}, id interface{}) *Repository_DeleteByID_Call[T] {
	return &Repository_DeleteByID_Call[T]{Call: _e.mock.On("DeleteByID", ctx, id)}
}

func (_c *Repository_DeleteByID_Call[T]) Run(run func(ctx context.Context, id uint)) *Repository_DeleteByID_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *Repository_DeleteByID_Call[T]) Return(_a0 error) *Repository_DeleteByID_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// FindAll provides a mock function with given fields: ctx, pagination
func (_m *Repository[T]) FindAll(ctx context.Context, pagination *models.Pagination) (*models.Page[*T], error) {
	ret := _m.Called(ctx, pagination)

	var r0 *models.Page[*T]
	if rf, ok := ret.Get(0).(func(context.Context, *models.Pagination) *models.Page[*T]); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page[*T])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type Repository_FindAll_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//  - ctx context.Context
//  - pagination *models.Pagination
func (_e *Repository_Expecter[T]) FindAll(ctx interface{}, pagination interface{}) *Repository_FindAll_Call[T] {
	return &Repository_FindAll_Call[T]{Call: _e.mock.On("FindAll", ctx, pagination)}
}

func (_c *Repository_FindAll_Call[T]) Run(run func(ctx context.Context, pagination *models.Pagination)) *Repository_FindAll_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Pagination))
	})
	return _c
}

func (_c *Repository_FindAll_Call[T]) Return(page *models.Page[*T], err error) *Repository_FindAll_Call[T] {
	_c.Call.Return(page, err)
	return _c
}

// FindOneByID provides a mock function with given fields: ctx, id
func (_m *Repository[T]) FindOneByID(ctx context.Context, id uint) (*T, error) {
	ret := _m.Called(ctx, id)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, uint) *T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindOneByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByID'
type Repository_FindOneByID_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// FindOneByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint
func (_e *Repository_Expecter[T]) FindOneByID(ctx interface{}, id interface{}) *Repository_FindOneByID_Call[T] {
	return &Repository_FindOneByID_Call[T]{Call: _e.mock.On("FindOneByID", ctx, id)}
}

func (_c *Repository_FindOneByID_Call[T]) Run(run func(ctx context.Context, id uint)) *Repository_FindOneByID_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *Repository_FindOneByID_Call[T]) Return(entity *T, err error) *Repository_FindOneByID_Call[T] {
	_c.Call.Return(entity, err)
	return _c
}

// FindOneByIDForUpdate provides a mock function with given fields: ctx, id
func (_m *Repository[T]) FindOneByIDForUpdate(ctx context.Context, id uint) (*T, error) {
	ret := _m.Called(ctx, id)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, uint) *T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindOneByIDForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByIDForUpdate'
type Repository_FindOneByIDForUpdate_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// FindOneByIDForUpdate is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint
func (_e *Repository_Expecter[T]) FindOneByIDForUpdate(ctx interface{}, id interface{}) *Repository_FindOneByIDForUpdate_Call[T] {
	return &Repository_FindOneByIDForUpdate_Call[T]{Call: _e.mock.On("FindOneByIDForUpdate", ctx, id)}
}

func (_c *Repository_FindOneByIDForUpdate_Call[T]) Run(run func(ctx context.Context, id uint)) *Repository_FindOneByIDForUpdate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *Repository_FindOneByIDForUpdate_Call[T]) Return(entity *T, err error) *Repository_FindOneByIDForUpdate_Call[T] {
	_c.Call.Return(entity, err)
	return _c
}

// Gorm provides a mock function with given fields:
func (_m *Repository[T]) Gorm() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Repository_Gorm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gorm'
type Repository_Gorm_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// Gorm is a helper method to define mock.On call
func (_e *Repository_Expecter[T]) Gorm() *Repository_Gorm_Call[T] {
	return &Repository_Gorm_Call[T]{Call: _e.mock.On("Gorm")}
}

func (_c *Repository_Gorm_Call[T]) Run(run func()) *Repository_Gorm_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_Gorm_Call[T]) Return(_a0 *gorm.DB) *Repository_Gorm_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// Save provides a mock function with given fields: ctx, entity
func (_m *Repository[T]) Save(ctx context.Context, entity *T) (*T, error) {
	ret := _m.Called(ctx, entity)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, *T) *T); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - ctx context.Context
//  - entity *T
func (_e *Repository_Expecter[T]) Save(ctx interface{}, entity interface{}) *Repository_Save_Call[T] {
	return &Repository_Save_Call[T]{Call: _e.mock.On("Save", ctx, entity)}
}

func (_c *Repository_Save_Call[T]) Run(run func(ctx context.Context, entity *T)) *Repository_Save_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T))
	})
	return _c
}

func (_c *Repository_Save_Call[T]) Return(_a0 *T, _a1 error) *Repository_Save_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// TransactWithDefaultRetry provides a mock function with given fields: operation
func (_m *Repository[T]) TransactWithDefaultRetry(operation func(*gorm.DB) error) error {
	ret := _m.Called(operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_TransactWithDefaultRetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactWithDefaultRetry'
type Repository_TransactWithDefaultRetry_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// TransactWithDefaultRetry is a helper method to define mock.On call
//  - operation func(*gorm.DB) error
func (_e *Repository_Expecter[T]) TransactWithDefaultRetry(operation interface{}) *Repository_TransactWithDefaultRetry_Call[T] {
	return &Repository_TransactWithDefaultRetry_Call[T]{Call: _e.mock.On("TransactWithDefaultRetry", operation)}
}

func (_c *Repository_TransactWithDefaultRetry_Call[T]) Run(run func(operation func(*gorm.DB) error)) *Repository_TransactWithDefaultRetry_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *Repository_TransactWithDefaultRetry_Call[T]) Return(_a0 error) *Repository_TransactWithDefaultRetry_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *Repository[T]) WithTx(tx *gorm.DB) persistence.Repository[T] {
	ret := _m.Called(tx)

	var r0 persistence.Repository[T]
	if rf, ok := ret.Get(0).(func(*gorm.DB) persistence.Repository[T]); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistence.Repository[T])
		}
	}

	return r0
}

// Repository_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type Repository_WithTx_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//  - tx *gorm.DB
func (_e *Repository_Expecter[T]) WithTx(tx interface{}) *Repository_WithTx_Call[T] {
	return &Repository_WithTx_Call[T]{Call: _e.mock.On("WithTx", tx)}
}

func (_c *Repository_WithTx_Call[T]) Run(run func(tx *gorm.DB)) *Repository_WithTx_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *Repository_WithTx_Call[T]) Return(_a0 persistence.Repository[T]) *Repository_WithTx_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

// WrapError provides a mock function with given fields: err
func (_m *Repository[T]) WrapError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_WrapError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapError'
type Repository_WrapError_Call[T common.EntityConstraint] struct {
	*mock.Call
}

// WrapError is a helper method to define mock.On call
//  - err error
func (_e *Repository_Expecter[T]) WrapError(err interface{}) *Repository_WrapError_Call[T] {
	return &Repository_WrapError_Call[T]{Call: _e.mock.On("WrapError", err)}
}

func (_c *Repository_WrapError_Call[T]) Run(run func(err error)) *Repository_WrapError_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Repository_WrapError_Call[T]) Return(_a0 error) *Repository_WrapError_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository[T common.EntityConstraint](t mockConstructorTestingTNewRepository) *Repository[T] {
	mock := &Repository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
