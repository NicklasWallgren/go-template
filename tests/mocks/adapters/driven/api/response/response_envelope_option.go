// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	response "github.com/NicklasWallgren/go-template/adapters/driven/api/response"
	mock "github.com/stretchr/testify/mock"
)

// ResponseEnvelopeOption is an autogenerated mock type for the ResponseEnvelopeOption type
type ResponseEnvelopeOption struct {
	mock.Mock
}

type ResponseEnvelopeOption_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseEnvelopeOption) EXPECT() *ResponseEnvelopeOption_Expecter {
	return &ResponseEnvelopeOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: envelop
func (_m *ResponseEnvelopeOption) Execute(envelop *response.APIResponseEnvelope) {
	_m.Called(envelop)
}

// ResponseEnvelopeOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ResponseEnvelopeOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - envelop *response.APIResponseEnvelope
func (_e *ResponseEnvelopeOption_Expecter) Execute(envelop interface{}) *ResponseEnvelopeOption_Execute_Call {
	return &ResponseEnvelopeOption_Execute_Call{Call: _e.mock.On("Execute", envelop)}
}

func (_c *ResponseEnvelopeOption_Execute_Call) Run(run func(envelop *response.APIResponseEnvelope)) *ResponseEnvelopeOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*response.APIResponseEnvelope))
	})
	return _c
}

func (_c *ResponseEnvelopeOption_Execute_Call) Return() *ResponseEnvelopeOption_Execute_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewResponseEnvelopeOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewResponseEnvelopeOption creates a new instance of ResponseEnvelopeOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResponseEnvelopeOption(t mockConstructorTestingTNewResponseEnvelopeOption) *ResponseEnvelopeOption {
	mock := &ResponseEnvelopeOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
