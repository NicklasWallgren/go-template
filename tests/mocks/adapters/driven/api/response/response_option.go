// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ResponseOption is an autogenerated mock type for the ResponseOption type
type ResponseOption struct {
	mock.Mock
}

type ResponseOption_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseOption) EXPECT() *ResponseOption_Expecter {
	return &ResponseOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: envelop
func (_m *ResponseOption) Execute(envelop *response.responseEnvelop) {
	_m.Called(envelop)
}

// ResponseOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ResponseOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - envelop *response.responseEnvelop
func (_e *ResponseOption_Expecter) Execute(envelop interface{}) *ResponseOption_Execute_Call {
	return &ResponseOption_Execute_Call{Call: _e.mock.On("Execute", envelop)}
}

func (_c *ResponseOption_Execute_Call) Run(run func(envelop *response.responseEnvelop)) *ResponseOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*response.responseEnvelop))
	})
	return _c
}

func (_c *ResponseOption_Execute_Call) Return() *ResponseOption_Execute_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewResponseOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewResponseOption creates a new instance of ResponseOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResponseOption(t mockConstructorTestingTNewResponseOption) *ResponseOption {
	mock := &ResponseOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
