// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	response "github.com/NicklasWallgren/go-template/adapters/driven/api/response"
	mock "github.com/stretchr/testify/mock"
)

// APIResponseEnvelop is an autogenerated mock type for the APIResponseEnvelop type
type APIResponseEnvelop struct {
	mock.Mock
}

type APIResponseEnvelop_Expecter struct {
	mock *mock.Mock
}

func (_m *APIResponseEnvelop) EXPECT() *APIResponseEnvelop_Expecter {
	return &APIResponseEnvelop_Expecter{mock: &_m.Mock}
}

// Response provides a mock function with given fields:
func (_m *APIResponseEnvelop) Response() response.APIResponse {
	ret := _m.Called()

	var r0 response.APIResponse
	if rf, ok := ret.Get(0).(func() response.APIResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.APIResponse)
		}
	}

	return r0
}

// APIResponseEnvelop_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type APIResponseEnvelop_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
func (_e *APIResponseEnvelop_Expecter) Response() *APIResponseEnvelop_Response_Call {
	return &APIResponseEnvelop_Response_Call{Call: _e.mock.On("Response")}
}

func (_c *APIResponseEnvelop_Response_Call) Run(run func()) *APIResponseEnvelop_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *APIResponseEnvelop_Response_Call) Return(_a0 response.APIResponse) *APIResponseEnvelop_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

// Status provides a mock function with given fields:
func (_m *APIResponseEnvelop) Status() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// APIResponseEnvelop_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type APIResponseEnvelop_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *APIResponseEnvelop_Expecter) Status() *APIResponseEnvelop_Status_Call {
	return &APIResponseEnvelop_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *APIResponseEnvelop_Status_Call) Run(run func()) *APIResponseEnvelop_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *APIResponseEnvelop_Status_Call) Return(_a0 int) *APIResponseEnvelop_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAPIResponseEnvelop interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPIResponseEnvelop creates a new instance of APIResponseEnvelop. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPIResponseEnvelop(t mockConstructorTestingTNewAPIResponseEnvelop) *APIResponseEnvelop {
	mock := &APIResponseEnvelop{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
