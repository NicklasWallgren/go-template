// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	cli "github.com/NicklasWallgren/go-template/adapters/driver/cmd"
	cobra "github.com/spf13/cobra"

	mock "github.com/stretchr/testify/mock"
)

// Command is an autogenerated mock type for the Command type
type Command struct {
	mock.Mock
}

type Command_Expecter struct {
	mock *mock.Mock
}

func (_m *Command) EXPECT() *Command_Expecter {
	return &Command_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: cmd
func (_m *Command) Run(cmd *cobra.Command) cli.CommandRunner {
	ret := _m.Called(cmd)

	var r0 cmd.CommandRunner
	if rf, ok := ret.Get(0).(func(*cobra.Command) cmd.CommandRunner); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cmd.CommandRunner)
		}
	}

	return r0
}

// Command_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Command_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//  - cmd *cobra.Command
func (_e *Command_Expecter) Run(cmd interface{}) *Command_Run_Call {
	return &Command_Run_Call{Call: _e.mock.On("Run", cmd)}
}

func (_c *Command_Run_Call) Run(run func(cmd *cobra.Command)) *Command_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cobra.Command))
	})
	return _c
}

func (_c *Command_Run_Call) Return(_a0 cli.CommandRunner) *Command_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

// Setup provides a mock function with given fields: cmd
func (_m *Command) Setup(cmd *cobra.Command) {
	_m.Called(cmd)
}

// Command_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type Command_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//  - cmd *cobra.Command
func (_e *Command_Expecter) Setup(cmd interface{}) *Command_Setup_Call {
	return &Command_Setup_Call{Call: _e.mock.On("Setup", cmd)}
}

func (_c *Command_Setup_Call) Run(run func(cmd *cobra.Command)) *Command_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cobra.Command))
	})
	return _c
}

func (_c *Command_Setup_Call) Return() *Command_Setup_Call {
	_c.Call.Return()
	return _c
}

// Short provides a mock function with given fields:
func (_m *Command) Short() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Command_Short_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Short'
type Command_Short_Call struct {
	*mock.Call
}

// Short is a helper method to define mock.On call
func (_e *Command_Expecter) Short() *Command_Short_Call {
	return &Command_Short_Call{Call: _e.mock.On("Short")}
}

func (_c *Command_Short_Call) Run(run func()) *Command_Short_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Command_Short_Call) Return(_a0 string) *Command_Short_Call {
	_c.Call.Return(_a0)
	return _c
}

// Use provides a mock function with given fields:
func (_m *Command) Use() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Command_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type Command_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
func (_e *Command_Expecter) Use() *Command_Use_Call {
	return &Command_Use_Call{Call: _e.mock.On("Use")}
}

func (_c *Command_Use_Call) Run(run func()) *Command_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Command_Use_Call) Return(_a0 string) *Command_Use_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCommand interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommand creates a new instance of Command. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommand(t mockConstructorTestingTNewCommand) *Command {
	mock := &Command{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
