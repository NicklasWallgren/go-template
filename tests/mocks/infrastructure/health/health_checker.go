// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/NicklasWallgren/go-template/adapters/driven/health"

	mock "github.com/stretchr/testify/mock"
)

// HealthChecker is an autogenerated mock type for the HealthChecker type
type HealthChecker struct {
	mock.Mock
}

type HealthChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthChecker) EXPECT() *HealthChecker_Expecter {
	return &HealthChecker_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx
func (_m *HealthChecker) Check(ctx context.Context) health.Health {
	ret := _m.Called(ctx)

	var r0 health.Health
	if rf, ok := ret.Get(0).(func(context.Context) health.Health); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(health.Health)
	}

	return r0
}

// HealthChecker_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type HealthChecker_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//  - ctx context.Context
func (_e *HealthChecker_Expecter) Check(ctx interface{}) *HealthChecker_Check_Call {
	return &HealthChecker_Check_Call{Call: _e.mock.On("Check", ctx)}
}

func (_c *HealthChecker_Check_Call) Run(run func(ctx context.Context)) *HealthChecker_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HealthChecker_Check_Call) Return(_a0 health.Health) *HealthChecker_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewHealthChecker interface {
	mock.TestingT
	Cleanup(func())
}

// NewHealthChecker creates a new instance of HealthChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHealthChecker(t mockConstructorTestingTNewHealthChecker) *HealthChecker {
	mock := &HealthChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
