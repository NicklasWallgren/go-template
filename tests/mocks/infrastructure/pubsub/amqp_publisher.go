// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AMQPPublisher is an autogenerated mock type for the AMQPPublisher type
type AMQPPublisher struct {
	mock.Mock
}

type AMQPPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *AMQPPublisher) EXPECT() *AMQPPublisher_Expecter {
	return &AMQPPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, data, routingKey
func (_m *AMQPPublisher) Publish(ctx context.Context, data interface{}, routingKey string) error {
	ret := _m.Called(ctx, data, routingKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) error); ok {
		r0 = rf(ctx, data, routingKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AMQPPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type AMQPPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//  - ctx context.Context
//  - data interface{}
//  - routingKey string
func (_e *AMQPPublisher_Expecter) Publish(ctx interface{}, data interface{}, routingKey interface{}) *AMQPPublisher_Publish_Call {
	return &AMQPPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, data, routingKey)}
}

func (_c *AMQPPublisher_Publish_Call) Run(run func(ctx context.Context, data interface{}, routingKey string)) *AMQPPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *AMQPPublisher_Publish_Call) Return(_a0 error) *AMQPPublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAMQPPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewAMQPPublisher creates a new instance of AMQPPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAMQPPublisher(t mockConstructorTestingTNewAMQPPublisher) *AMQPPublisher {
	mock := &AMQPPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
