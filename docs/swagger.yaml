basePath: /api
definitions:
  response.APIError:
    properties:
      field:
        example: id
        type: string
      message:
        example: invalid id
        type: string
      value: {}
    type: object
  response.APIErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/response.APIError'
        type: array
    type: object
  response.PageableResponse-response_UserResponse:
    properties:
      content:
        items:
          $ref: '#/definitions/response.UserResponse'
        type: array
      empty:
        type: boolean
      number:
        type: integer
      numberOfElements:
        type: integer
      totalElements:
        type: integer
      totalPages:
        type: integer
    type: object
  response.UserResponse:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  users.CreateUserRequest:
    properties:
      age:
        example: 50
        type: integer
      birthday:
        example: "2022-06-10"
        type: string
      email:
        example: Name@name.com
        type: string
      name:
        description: TODO, apply validation
        example: Name
        type: string
    required:
    - age
    - birthday
    - email
    - name
    type: object
host: localhost:8080
info:
  contact: {}
  description: An template for implementing a hexagonal application.
  title: GO template API
  version: "1.0"
paths:
  /users:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PageableResponse-response_UserResponse'
        "400":
          description: in case of an error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      summary: Retrieves paginated response of users
    post:
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.CreateUserRequest'
      responses:
        "201":
          description: if a new user was created
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: in case of a bad request
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      summary: Creates a user using the prerequisites provided
  /users/{id}:
    delete:
      responses:
        "204":
          description: if the user is deleted successfully
        "400":
          description: in case of a bad request
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "500":
          description: in case of an internal error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      summary: Deletes a user by id.
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PageableResponse-response_UserResponse'
        "400":
          description: in case of a bad request
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "404":
          description: if an unknown ID is provided
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      summary: Retrieves a user by the provided ID.
    post:
      responses:
        "200":
          description: the updated users
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: in case of a bad request
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "500":
          description: in case of an internal error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      summary: Updates an existing user.
swagger: "2.0"
